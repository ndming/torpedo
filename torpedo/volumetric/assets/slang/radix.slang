import splat;

[[vk::push_constant]]
uniform RasterInfo info;

[[vk::binding(6)]]
StructuredBuffer<uint64_t> keys;

[[vk::binding(7)]]
StructuredBuffer<uint32_t> vals;

[[vk::binding(8)]]
RWStructuredBuffer<uint64_t> sortedKeys;

[[vk::binding(9)]]
RWStructuredBuffer<uint32_t> indices;

static const uint RADIX_SORT_BINS = 256;
static const uint SORT_ITERATIONS = 4; // sorting 8 bits per iteration
static const uint SUBGROUP_SIZE = 32;  // 32 for NVIDIA, 64 if AMD

groupshared uint histogram[RADIX_SORT_BINS];
groupshared uint sums[RADIX_SORT_BINS / SUBGROUP_SIZE]; // sub-group reduction
groupshared uint localOffsets[RADIX_SORT_BINS]; // sub-group exclusive prefix sum
groupshared uint groupOffsets[RADIX_SORT_BINS]; // workgroup exclusive prefix sum

// Performs radix sort on the key/value pairs generated by keygen.slang, based on:
// https://github.com/embree/embree/blob/v4.0.0-ploc/kernels/rthwif/builder/gpu/sort.h
// https://github.com/MircoWerner/VkRadixSort/blob/main/singleradixsort/resources/shaders/single_radixsort.comp

[shader("compute")]
[numthreads(LINEAR_WORKGROUP_SIZE, 1, 1)]
void main(uint3 globalInvocationID : SV_DispatchThreadID) {
    histogram[0] = 0;
}